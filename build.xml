<!--
 ! Copyright 2011 UnboundID Corp.
 ! All Rights Reserved.
 -->
<project name="UnboundID SCIM SDK for Java" basedir="." default="package">

  <description>
    This project provides a Java SDK that can be used to communicate with a
    server that provides a Simple Cloud Identity Management (SCIM) interface.
  </description>




  <!-- Define a number of project-wide properties. -->
  <property name="src.dir"              location="src" />
  <property name="buildsrc.dir"         location="build-src" />
  <property name="gensrc.dir"           location="gen-src" />
  <property name="build.dir"            location="build" />
  <property name="docs.dir"             location="docs" />
  <property name="distroot.dir"         location="dist-root" />
  <property name="client.distroot.dir"  location="client-dist-root" />
  <property name="resource.dir"         location="resource" />
  <property name="classes.dir"          location="${build.dir}/classes" />
  <property name="package.dir"          location="${build.dir}/package" />
  <property name="serversdk.dir"        location="unboundid-server-sdk-3.1.0.0" />
  <property name="serversdk.lib.dir"    location="${serversdk.dir}/lib" />
  <property name="ldapsdk.dir"          location="ext/ldapsdk" />
  <property name="jetty.dir"            location="ext/jetty" />
  <property name="jaxb.dir"             location="ext/jaxb" />
  <property name="json.dir"             location="ext/json" />
  <property name="xsom.dir"             location="ext/xsom" />
  <property name="relaxngDatatype.dir"  location="ext/relaxngDatatype" />
  <property name="wink.dir"             location="ext/wink" />
  <property name="jackson.dir"          location="ext/jackson" />




  <!-- Define properties used for processing message files. -->
  <property name="messages.dir"         location="messages" />
  <property name="messages.src.dir"     location="${buildsrc.dir}/messages" />
  <property name="messages.classes.dir" location="${build.dir}/messages" />
  <property name="messages.gensrc.dir"  location="${gensrc.dir}/messages" />


  <!-- Define properties used for processing SCIM schema using JAXB. -->
  <property name="schema.gensrc.dir"  location="${gensrc.dir}/schema" />
  <property name="schema.core"        location="${resource.dir}/schema/scim-core.xsd" />
  <property name="schema.package"     value="com.unboundid.scim.schema" />


  <!-- Define properties used for unit testing. -->
  <property name="testng.dir"        location="ext/testng" />
  <property name="unit.src.dir"      location="tests/unit/src" />
  <property name="unit.classes.dir"  location="${build.dir}/test/classes" />
  <property name="unit.report.dir"   location="${build.dir}/test/report" />
  <property name="unit.temp.dir"     location="${build.dir}/test/temp" />
  <property name="unit.resource.dir" location="tests/unit/resource" />

  <!-- Define properties used for code coverage. -->
  <property name="emma.dir"               location="ext/emma" />
  <property name="coverage.dir"           location="${build.dir}/coverage" />
  <property name="coverage.collected.dir" location="${build.dir}/collected" />
  <property name="coverage.instrumented.dir"
            location="${coverage.dir}/instrumented" />
  <property name="coverage.report.dir"    location="${coverage.dir}/report" />


  <!-- Define properties used for checkstyle analysis. -->
  <property name="checkstyle.dir"       location="ext/checkstyle" />
  <property name="checkstyle.cache.dir" location=".checkstyle-cache" />


  <!-- Define properties used for Ant tasks -->
  <property name="ant.lib.dir" location="ext/ant/lib" />


  <!-- Define the amount of memory to use for forked VMs -->
  <property name="MEM" value="512M" />


  <!-- Define a number of project-wide classpath values. -->
  <path id="json-jars">
    <fileset dir="${json.dir}">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="jackson-jars">
    <fileset dir="${jackson.dir}/">
      <include name="jackson-all-*.jar"/>
    </fileset>
  </path>
  <path id="jetty-jars">
    <fileset dir="${jetty.dir}/lib">
      <include name="jetty-client-*.jar"/>
      <include name="jetty-continuation-*.jar"/>
      <include name="jetty-http-*.jar"/>
      <include name="jetty-io-*.jar"/>
      <include name="jetty-security-*.jar"/>
      <include name="jetty-servlet-*.jar"/>
      <include name="jetty-server-*.jar"/>
      <include name="jetty-util-*.jar"/>
      <include name="servlet-api-*.jar"/>
    </fileset>
  </path>
  <path id="ldapsdk-jars">
    <fileset dir="${ldapsdk.dir}">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="xsom-jars">
    <fileset dir="${xsom.dir}">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="relaxngDatatype-jars">
    <fileset dir="${relaxngDatatype.dir}">
      <include name="*.jar" />
    </fileset>
  </path>
  <path id="wink-jars-no-json">
    <fileset dir="${wink.dir}/dist">
      <include name="wink-*jar"/>
      <exclude name="wink-server*jar"/>
    </fileset>
    <fileset dir="${wink.dir}/lib">
      <include name="jsr311-api-*.jar"/>
      <include name="slf4j-api-*.jar"/>
      <include name="slf4j-simple-*.jar"/>
    </fileset>
  </path>
  <path id="wink-jars-with-json">
    <path refid="wink-jars-no-json"/>
    <fileset dir="${wink.dir}/ext/wink-jackson-provider">
      <include name="wink-jackson-provider-*.jar"/>
    </fileset>
    <fileset dir="${wink.dir}/ext/wink-json-provider">
      <include name="wink-json-provider-*.jar"/>
    </fileset>
  </path>

  <path id="server-jars">
    <path refid="jetty-jars"/>
    <path refid="ldapsdk-jars"/>
    <path refid="json-jars"/>
    <path refid="jackson-jars"/>
    <path refid="xsom-jars"/>
    <path refid="relaxngDatatype-jars"/>
  </path>

  <path id="client-jars-with-json">
    <path refid="ldapsdk-jars"/>
    <path refid="wink-jars-with-json"/>
  </path>

  <path id="client-jars-no-json">
    <path refid="ldapsdk-jars"/>
    <path refid="wink-jars-no-json"/>
  </path>

  <!-- Clean up after an earlier build. -->
  <target name="clean" description="Clean up after an earlier build">
    <delete dir="${build.dir}" />
    <delete dir="${gensrc.dir}" />
  </target>




  <!-- Generate message source files. -->
  <target name="generatemessages"
          description="Generate message file enumerations">
    <!-- Recreate the build/messages directory if necessary. -->
    <delete dir="${messages.classes.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${messages.classes.dir}" />

    <!-- Compile the Ant task used to generate the messages source files. -->
    <javac srcdir="${messages.src.dir}" destdir="${messages.classes.dir}"
           target="1.5" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeantruntime="false">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${ant.lib.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>

    <!-- Define and invoke the task. -->
    <taskdef name="genmsgs"
             className="com.unboundid.buildtools.messages.GenerateMessages">
      <classpath>
        <pathelement location="${messages.classes.dir}" />
      </classpath>
    </taskdef>

    <delete dir="${messages.gensrc.dir}" />
    <mkdir  dir="${messages.gensrc.dir}" />
    <genmsgs propertiesDir="${messages.dir}"
             generatedSourceDir="${messages.gensrc.dir}" />
  </target>





  <!-- Generate a Version source file. -->
  <target name="generateversion"
          description="Generate a Version.java source file">
    <tstamp>
      <format property="timestamp" pattern="yyyyMMddHHmmss'Z'" timezone="UTC" />
    </tstamp>

    <tstamp>
      <format property="year" pattern="yyyy" timezone="UTC" />
    </tstamp>

    <loadproperties srcFile="version.properties" />

    <condition property="svn.path" value="{not-applicable}">
      <not>
        <isset property="svn.path" />
      </not>
    </condition>

    <condition property="svn.version" value="-1">
      <not>
        <isset property="svn.version" />
      </not>
    </condition>

    <delete file="${src.dir}/com/unboundid/scim/sdk/Version.java" />
    <copy file="${resource.dir}/Version.java.stub"
          tofile="${src.dir}/com/unboundid/scim/sdk/Version.java"
          overwrite="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>




  <!-- Generate source files for the SCIM schema using JAXB. -->
  <target name="generateschemasources">

    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
      <classpath>
        <fileset dir="${jaxb.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>

    <delete dir="${schema.gensrc.dir}" />
    <mkdir dir="${schema.gensrc.dir}"/>
    <xjc destdir="${schema.gensrc.dir}"
        removeOldOutput="yes"
        extension="false"
        package="${schema.package}"
        schema="${schema.core}"/>
  </target>




  <!-- Compile the Java source files. -->
  <target name="compile" description="Compile the Java source files"
          depends="clean,generatemessages,generateschemasources,generateversion">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />

    <javac srcdir="${messages.gensrc.dir}" destdir="${classes.dir}"
           source="1.5" target="1.5" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeantruntime="false">
      <compilerarg value="-Xlint:all" />
    </javac>

    <javac srcdir="${schema.gensrc.dir}" destdir="${classes.dir}"
           source="1.5" target="1.5" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeantruntime="false">
      <compilerarg value="-Xlint:all" />
    </javac>

    <javac srcdir="${src.dir}" destdir="${classes.dir}"
           source="1.5" target="1.5" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeantruntime="false">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <pathelement location="${classes.dir}" />
        <path refid="client-jars-with-json"/>
        <path refid="server-jars"/>
      </classpath>
    </javac>

    <copy todir="${classes.dir}">
      <fileset dir="${messages.dir}">
        <include name="*.properties" />
      </fileset>
    </copy>
  </target>




  <!-- Perform checkstyle analysis on the code. -->
  <target name="checkstyle" description="Validate source code style"
          depends="compile">
    <mkdir dir="${checkstyle.cache.dir}" />

    <taskdef resource="checkstyletask.properties"
             classpath="${checkstyle.dir}/checkstyle-5.3-all.jar" />

    <checkstyle config="${checkstyle.dir}/scimri-checkstyle.xml"
                classpath="${classes.dir}" failOnViolation="true">
      <fileset dir="${src.dir}" includes="**/*.java" />
      <formatter type="plain" />
    </checkstyle>

    <checkstyle config="${checkstyle.dir}/scimri-unit-checkstyle.xml"
                classpath="${classes.dir}" failOnViolation="true">
      <fileset dir="${unit.src.dir}" includes="**/*.java" />
      <formatter type="plain" />
    </checkstyle>
  </target>





  <!-- Create a distributable package including the JAR file, docs, etc. -->
  <target name="package" description="Create a distributable package"
          depends="compile,checkstyle">
    <mkdir dir="${package.dir}" />

    <property name="MMP"
              value="${MAJOR_VERSION}.${MINOR_VERSION}.${POINT_VERSION}" />
    <property name="VER" value=";version=&quot;${MMP}&quot;" />

    <property name="buildid"
              value="${SHORT_NAME}-${MMP}${VERSION_QUALIFIER}" />

    <property name="ri.package.dir"
              location="${package.dir}/${buildid}" />
    <property name="server.package.dir"
              location="${ri.package.dir}/server" />
    <property name="client.package.dir"
              location="${ri.package.dir}/client" />

    <mkdir dir="${ri.package.dir}" />
    <mkdir dir="${server.package.dir}" />
    <mkdir dir="${server.package.dir}/lib" />
    <mkdir dir="${server.package.dir}/docs" />
    <mkdir dir="${server.package.dir}/docs/javadoc" />
    <mkdir dir="${server.package.dir}/resource" />

    <copy todir="${server.package.dir}">
      <fileset dir="${distroot.dir}">
        <include name="**/*" />
        <exclude name="**/.svn" />
      </fileset>
    </copy>

    <copy todir="${server.package.dir}/docs">
      <fileset dir="${server.package.dir}">
        <include name="LICENSE*.txt" />
      </fileset>
    </copy>

    <copy todir="${server.package.dir}/docs/examples">
      <fileset dir="${src.dir}/com/unboundid/scim/sdk/examples">
        <include name="*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
    </copy>

    <copy todir="${server.package.dir}/lib">
      <path refid="server-jars"/>
    </copy>

    <copy todir="${server.package.dir}/resource/schema">
      <fileset dir="${resource.dir}/schema">
        <include name="*.xsd" />
      </fileset>
    </copy>

    <copy todir="${server.package.dir}/resource/ldif">
      <fileset dir="${unit.resource.dir}/ldif">
        <include name="spec-compat.ldif" />
      </fileset>
    </copy>

    <jar jarfile="${server.package.dir}/lib/unboundid-scimri-server.jar"
         compress="true"
         index="true">
      <fileset dir="${classes.dir}"/>
      <manifest>
        <!--<attribute name="Main-Class" value="com.unboundid.util.Launcher" />-->
        <attribute name="Build-Time" value="${timestamp}" />
        <attribute name="Implementation-Title"
                   value="${PRODUCT_NAME}" />
        <attribute name="Implementation-Version"
                   value="${MMP}${VERSION_QUALIFIER}" />
        <attribute name="Source-Path" value="${svn.path}" />
        <attribute name="Source-Revision" value="${svn.version}" />
        <attribute name="Implementation-Vendor" value="UnboundID Corp." />
        <attribute name="Implementation-URL"
                   value="http://www.unboundid.com/" />
        <attribute name="Bundle-ManifestVersion" value="2" />
        <attribute name="Bundle-Copyright"
                   value="Copyright 2011-${year} UnboundID Corp." />
        <attribute name="Bundle-Name"
                   value="UnboundID SCIM SDK for Java" />
        <attribute name="Bundle-SymbolicName"
                   value="com.unboundid.scim.sdk" />
        <attribute name="Bundle-Vendor" value="UnboundID Corp." />
        <attribute name="Bundle-Version" value="${MMP}" />
        <attribute name="Bundle-RequiredExecutionEnvironment"
                   value="J2SE-1.5" />
        <attribute name="Bundle-Category" value="communication,network" />
        <attribute name="Bundle-DocURL"
                   value="http://www.unboundid.com/products/scimri/" />
        <attribute name="Export-Package"
                   value="com.unboundid.scim.sdk${VER}" />
        <!--<attribute name="Import-Package"-->
                   <!--value="javax.net,javax.net.ssl,javax.security.auth,javax.security.auth.callback,javax.security.auth.login,javax.security.sasl" />-->
        <attribute name="Sealed" value="false" />
      </manifest>
    </jar>

    <fixcrlf srcDir="${server.package.dir}/tools" excludes="*.bat" eol="lf" />
    <fixcrlf srcDir="${server.package.dir}/tools" includes="*.bat" eol="crlf" />
    <chmod perm="755">
      <fileset dir="${server.package.dir}/tools">
        <exclude name="*.bat" />
      </fileset>
    </chmod>

    <mkdir dir="${client.package.dir}" />
    <mkdir dir="${client.package.dir}/ext" />
    <mkdir dir="${client.package.dir}/lib" />
    <mkdir dir="${client.package.dir}/src" />
    <mkdir dir="${client.package.dir}/resource" />
    <mkdir dir="${client.package.dir}/docs" />
    <mkdir dir="${client.package.dir}/docs/javadoc" />

    <copy todir="${client.package.dir}">
      <fileset dir="${client.distroot.dir}">
        <include name="**/*" />
        <exclude name="**/.svn" />
      </fileset>
    </copy>

    <copy todir="${client.package.dir}/ext">
      <fileset dir="ext">
        <include name="jaxb/*.jar" />
      </fileset>
    </copy>

    <copy todir="${client.package.dir}/lib">
      <path refid="client-jars-no-json"/>
    </copy>

    <copy todir="${client.package.dir}/src">
      <fileset dir="${src.dir}">
        <include name="com/unboundid/scim/wink/**/*.java" />
        <exclude name="**/package-info.java" />
      </fileset>
    </copy>

    <copy todir="${client.package.dir}/resource/schema">
      <fileset dir="${resource.dir}/schema">
        <include name="*.xsd" />
      </fileset>
    </copy>

    <javadoc destdir="${client.package.dir}/docs/javadoc" source="1.5"
             useexternalfile="true"
             additionalparam="-quiet" linksource="yes"
             windowtitle="UnboundID SCIM SDK for Java ${MAJOR_VERSION}.${MINOR_VERSION}.${POINT_VERSION}${VERSION_QUALIFIER}"
             doctitle="UnboundID SCIM SDK for Java&lt;br&gt;${MAJOR_VERSION}.${MINOR_VERSION}.${POINT_VERSION}${VERSION_QUALIFIER}"
             maxmemory="${MEM}" access="protected"
             stylesheetfile="${resource.dir}/unboundid-javadoc.css"
             bottom="&lt;div id=&quot;footer&quot;&gt;Copyright &amp;copy; 2011-${year} &amp;ndash; UnboundID Corp. &amp;ndash; All Rights Reserved.&lt;/div&gt;">
      <fileset dir="${src.dir}/com/unboundid/scim/wink" defaultexcludes="yes">
        <exclude name="**/*Helper*" />
        <exclude name="**/*Constants*" />
      </fileset>
      <classpath>
        <pathelement location="${classes.dir}" />
        <path refid="client-jars-no-json"/>
        <path refid="server-jars"/>
      </classpath>
    </javadoc>

    <delete file="${client.package.dir}/docs/javadoc/resources/inherit.gif" />
    <copy file="${resource.dir}/inherit.gif"
          toFile="${client.package.dir}/docs/javadoc/resources/inherit.gif" />

    <zip destfile="${package.dir}/${buildid}.zip" compress="true">
      <zipfileset dir="${package.dir}" includes="${buildid}/**/*"
                  filemode="644" dirmode="755">
        <exclude name="${buildid}/server/tools/*" />
      </zipfileset>
      <zipfileset dir="${package.dir}" filemode="644" dirmode="755">
        <include name="${buildid}/server/tools/*.bat" />
      </zipfileset>
      <zipfileset dir="${package.dir}" filemode="755" dirmode="755">
        <include name="${buildid}/server/tools/*" />
        <exclude name="${buildid}/server/tools/*.bat" />
      </zipfileset>
    </zip>

  </target>




  <!-- Run the TestNG unit tests. -->
  <target name="test" description="Run the TestNG unit tests"
          depends="compile">
    <!-- Enable code coverage if appropriate -->
    <condition property="coverage.enabled" value="false">
      <not>
        <isset property="coverage.enabled" />
      </not>
    </condition>
    <path id="emma.lib">
      <pathelement location="${emma.dir}/emma.jar" />
      <pathelement location="${emma.dir}/emma_ant.jar" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
    <emma enabled="${coverage.enabled}">
      <instr instrpathref="instrument.classes"
             destdir="${coverage.instrumented.dir}"
             metadatafile="${coverage.collected.dir}/collected.emma"
             merge="true" />
    </emma>

    <!-- This should really be conditional on coverage.enabled -->
    <path id="instrument.classes">
      <pathelement location="${classes.dir}" />
    </path>

    <!-- Set default values for the properties used to set information
         about the Directory Server instance to use for testing. -->
    <condition property="ds.host" value="127.0.0.1">
      <not>
        <isset property="ds.host" />
      </not>
    </condition>
    <condition property="ds.port" value="-1">
      <not>
        <isset property="ds.port" />
      </not>
    </condition>
    <condition property="ds.ssl.port" value="-1">
      <not>
        <isset property="ds.ssl.port" />
      </not>
    </condition>
    <condition property="ds.basedn" value="dc=example,dc=com">
      <not>
        <isset property="ds.basedn" />
      </not>
    </condition>
    <condition property="ds.binddn" value="cn=Directory Manager">
      <not>
        <isset property="ds.binddn" />
      </not>
    </condition>
    <condition property="ds.bindpw" value="password">
      <not>
        <isset property="ds.bindpw" />
      </not>
    </condition>

    <!-- Compile the unit tests -->
    <mkdir dir="${unit.classes.dir}" />
    <javac srcdir="${unit.src.dir}" destdir="${unit.classes.dir}"
           source="1.5" target="1.5" deprecation="true" fork="true"
           memoryInitialSize="${MEM}" memoryMaximumSize="${MEM}"
           optimize="true" debug="on" debuglevel="lines,source,vars"
           includeantruntime="false">
      <compilerarg value="-Xlint:all" />
      <classpath>
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
        <path refid="client-jars-with-json"/>
        <path refid="server-jars"/>
        <path refid="instrument.classes" />
      </classpath>
    </javac>

    <!-- Run the unit tests -->
    <mkdir dir="${unit.temp.dir}" />
    <mkdir dir="${unit.report.dir}" />
    <taskdef resource="testngtasks">
      <classpath>
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
    <testng outputdir="${unit.report.dir}" haltOnFailure="true"
            listeners="com.unboundid.test.SCIMRITestListener"
            enableAssert="true">
      <classpath>
        <pathelement location="${coverage.instrumented.dir}" />
        <pathelement location="${classes.dir}" />
        <pathelement location="${unit.classes.dir}" />
        <path refid="client-jars-with-json"/>
        <path refid="server-jars"/>
        <path refid="instrument.classes" />
        <path refid="emma.lib" />
        <fileset dir="${testng.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
      <xmlfileset dir="${testng.dir}" includes="scimri-fileset.xml" />
      <jvmarg value="-server" />
      <jvmarg value="-Xms${MEM}" />
      <jvmarg value="-Xmx${MEM}" />
      <jvmarg value="-XX:+UseBiasedLocking" />
      <jvmarg value="-XX:+UseMembar" />
      <jvmarg value="-Demma.coverage.out.file=${coverage.collected.dir}/unit.emma" />
      <jvmarg value="-Demma.coverage.out.merge=false" />
      <jvmarg value="-Dbasedir=${basedir}" />
      <jvmarg value="-Dunit.resource.dir=${unit.resource.dir}" />
      <jvmarg value="-Dpackage.resource.dir=${resource.dir}" />
      <jvmarg value="-Djava.io.tmpdir=${unit.temp.dir}" />
      <jvmarg value="-Dds.host=${ds.host}" />
      <jvmarg value="-Dds.port=${ds.port}" />
      <jvmarg value="-Dds.ssl.port=${ds.ssl.port}" />
      <jvmarg value="-Dds.basedn=${ds.basedn}" />
      <jvmarg value="-Dds.binddn=${ds.binddn}" />
      <jvmarg value="-Dds.bindpw=${ds.bindpw}" />
    </testng>

    <!-- Generate the code coverage report -->
    <emma enabled="${coverage.enabled}">
      <report sourcepath="${src.dir}" columns="name,class,method,line"
              metrics="class:90,method:90,line:70"
              sort="+name,+line">
        <fileset dir="${coverage.collected.dir}">
          <include name="unit.emma" />
          <include name="collected.emma" />
        </fileset>
        <txt outfile="${coverage.report.dir}/coverage.txt" />
        <html outfile="${coverage.report.dir}/index.html" />
      </report>
    </emma>
  </target>




  <!-- Enable code coverage metrics for the unit tests. -->
  <target name="coverage" description="Enable code coverage metrics"
          depends="coverage-setup,test" />




  <!-- Do the necessary setup for collecting coverage metrics. -->
  <target name="coverage-setup">
    <property name="coverage.enabled" value="true" />

    <mkdir dir="${coverage.dir}" />
    <mkdir dir="${coverage.collected.dir}" />
    <mkdir dir="${coverage.instrumented.dir}" />
    <mkdir dir="${coverage.report.dir}" />

    <path id="instrument.classes">
      <pathelement location="${classes.dir}" />
    </path>
  </target>




  <!-- Push the SCIM libs to the Server SDK workspace. -->
  <target name="push" description="Push libs to the Server SDK workspace"
          depends="package" >
    <copy todir="${serversdk.lib.dir}">
      <fileset dir="${server.package.dir}/lib" >
        <exclude name="unboundid-ldapsdk-se.jar" />
      </fileset>
    </copy>
  </target>




  <!-- Run all defined targets -->
  <target name="all" description="Run all build targets"
          depends="package,coverage,push" />

</project>

